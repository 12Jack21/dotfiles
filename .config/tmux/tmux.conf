# : << 'EOF'
#  # 加前面这一行可以让 shell直接去找到 EOF,以其为开头进行 shell script的解析

# --= ENV variable loaded -----------------------------------------------------
%if #{==:#{TMUX_PROGRAM},}
# 在整个环境里找到一个 tmux 来作为执行的环境
  run 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null)"; {[ -f "$TMUX_PROGRAM" ] && [ -x "$TMUX_PROGRAM" ]} || TMUX_PROGRAM="$(command -v tmux || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif
%if #{==:#{TMUX_SOCKET},}
  run '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif
%if #{==:#{TMUX_CONF},}
  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(for conf in "$HOME/.tmux.conf" "$XDG_CONFIG_HOME/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"; do [ -f "$conf" ] && printf "%s" "$conf" && break; done)'
%endif
%if #{==:#{TMUX_CONF_LOCAL},}
  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF_LOCAL "$TMUX_CONF.local"'
%endif

# -- general -------------------------------------------------------------------

setw -g mouse on

# set -g default-terminal "xterm-256-color"
set -g default-terminal "screen-256color" # oh-my-tmux 
set-option -ga terminal-overrides ",xterm-256color:Tc"
# set-option -ga terminal-overrides ",screen-256color:Tc"
set-option -g allow-rename on # for ranger to rename window name



setw -g xterm-keys on
set -s escape-time  10                    # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on

# Unbind the original prefix
unbind C-b
set-option -g prefix `
bind ` send-prefix

# set -g prefix2 C-a                        # GNU-Screen compatible prefix
# bind C-a send-prefix -2

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 5000                 # boost history

# edit configuration
bind e new-window -n "#{TMUX_CONF_LOCAL}" -e EDITOR="$EDITOR" sh -c 'case "${EDITOR:-vim}" in *vim*) ${EDITOR:-vim} -c ":set syntax=tmux" "$TMUX_CONF_LOCAL";; *) $EDITOR "$TMUX_CONF_LOCAL";; esac && "$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF" \; display "$TMUX_CONF_LOCAL sourced"'

# reload configuration
bind r run '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "Reload Config: #{TMUX_CONF} sourced"
# bind r run 'echo "hello $TMUX_CONF, $TMUX_PROGRAM"; $TMUX_PROGRAM  -V; "$TMUX_PROGRAM" source "$TMUX_CONF"' \; display "Reload Config: #{TMUX_CONF} sourced"
# bind r source-file ~/.confi/tmux/tmux.conf \; display "#{TMUX_CONF} sourced"


# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

# clear both screen and history
bind -r C-l send-keys C-l \; run 'sleep 0.2' \; clear-history
# bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# activity
set -g monitor-activity on
set -g visual-activity off


# -- navigation ----------------------------------------------------------------

# create session
# bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# session navigation
bind BTab switch-client -l  # move to last session

# split current window horizontally
bind - split-window -v
# split current window vertically
bind _ split-window -h

bind -r h previous-window  # select previous window
bind -r l next-window  # select next window
bind C-c new-window
# Bind Ctrl + 1 to Ctrl + 9 to switch to windows 1-9
unbind-key -n C-1
unbind-key -n C-2
bind -n C-1 select-window -t1
bind -n C-2 select-window -t2
bind -n C-3 select-window -t3
bind-key -n C-4 select-window -t4
bind-key -n C-5 select-window -t5
bind-key -n C-6 select-window -t6
bind-key -n C-7 select-window -t7
bind-key -n C-8 select-window -t8
bind-key -n C-9 select-window -t9
# bind-key -n C-0 select-window -t 10


# pane navigation
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run "cut -c3- '#{TMUX_CONF}' | sh -s _maximize_pane '#{session_name}' '#D'"

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind Tab last-window        # move to last active window

# toggle mouse
# bind m run "cut -c3- '#{TMUX_CONF}' | sh -s _toggle_mouse"


# -- facebook pathpicker -------------------------------------------------------

# bind F run "cut -c3- '#{TMUX_CONF}' | sh -s _fpp '#{pane_id}' '#{pane_current_path}'"


# -- buffers -------------------------------------------------------------------

bind b list-buffers     # list paste buffers
bind p paste-buffer -p  # paste from the top paste buffer
bind P choose-buffer    # choose which buffer to paste from

# -- tmux-fzf configuration ----
# TMUX_FZF_LAUNCH_KEY="C-f" # default keybinding Prefix+<C-F>
TMUX_FZF_LAUNCH_KEY="f"
# Default value in tmux >= 3.2
TMUX_FZF_OPTIONS="-p -w 62% -h 38% -m"
TMUX_FZF_PREVIEW=1 # preview window
# TMUX_FZF_ORDER="session|window|pane|command|keybinding|clipboard|process"
TMUX_FZF_ORDER="pane|command|clipboard"

# ---------------- Personal Plugins Configuration ------------------
# List of plugins
set -g @plugin 'tmux-plugins/tpm'

set -g @plugin 'tmux-plugins/tmux-sensible'  # a default setting of tmux  TODO: why?
set -g @plugin 'sainnhe/tmux-fzf'

# for neovim session with tmux-resurrect and continuum
set -g @plugin 'tmux-plugins/tmux-resurrect'  # save tmux session with <leader><C-s>
set -g @plugin 'tmux-plugins/tmux-continuum'  # automatically save and restore session
set -g @plugin 'tmux-plugins/tmux-yank' # mouse select then copy
set -g @plugin 'tmux-plugins/tmux-logging' # .log file will be saved in $HOME
set -g @plugin 'tmux-plugins/tmux-prefix-highlight' # highlight your prefix keybindding
set -g @plugin 'christoomey/vim-tmux-navigator' # switch panes easily in vim-style
# catppuccin theme configuration
set -g @plugin 'catppuccin/tmux#latest' # theme
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-cpu'  # cpu info in status bar


set -g @resurrect-strategy-nvim 'session'  # support for neovim session
set -g @resurrect-processes 'ssh mysql redis-server npm' # add addtional resurrect application
set -g @resurrect-capture-pane-contents 'on' # also restore panen
set -g @continuum-save-interval '60' # save interval = 60 minutes
set -g @continuum-restore 'on'  # open button for auto-restore

set -g @logging-path "~/tmux_logs"

set -g @catppuccin_flavour 'macchiato' # latte,frappe, macchiato or mocha
set -g @catppuccin_menu_style "default" # Use a value compatible with the standard tmux `menu-style`
set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_left_separator "█"
set -g @catppuccin_window_right_separator "█ "
set -g @catppuccin_window_number_position "right"
set -g @catppuccin_window_middle_separator "  █"
set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#{pane_current_path}"
set -g @catppuccin_status_background "theme"
set -g @catppuccin_status_left_separator  ""
set -g @catppuccin_status_right_separator " "
set -g @catppuccin_status_fill "all"
set -g @catppuccin_status_connect_separator "yes"
set -g @catppuccin_status_modules_left "application"  # directory"
set -g @catppuccin_status_modules_right "cpu date_time battery session"
# set -g @catppuccin_directory_text "#{pane_current_path}"


run '~/.tmux/plugins/tpm/tpm'

# ---------------------------------------------------------------


# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e

# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(printf "%s" "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & \"$TMUX_PROGRAM\" ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} setw -t \"$current_session:\" remain-on-exit on; printf \"\\033[\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\n\" '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=20
#     while [ "$("$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != "$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# "$@"
